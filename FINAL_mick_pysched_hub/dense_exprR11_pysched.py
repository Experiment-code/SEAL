from tvm import te

def schedule_dense_822(X, Y, T_matmul_NT, s):
	T_matmul_NT_i, T_matmul_NT_j, T_matmul_NT_k = tuple(T_matmul_NT.op.axis) + tuple(T_matmul_NT.op.reduce_axis)
	T_matmul_NT_local, = s.cache_write([T_matmul_NT], "local")
	T_matmul_NT_local_i_c, T_matmul_NT_local_j_c, T_matmul_NT_local_k = tuple(T_matmul_NT_local.op.axis) + tuple(T_matmul_NT_local.op.reduce_axis)
	T_matmul_NT_local_i_c_o_i, T_matmul_NT_local_i_c_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c, factor=1)
	T_matmul_NT_local_i_c_o_o_i, T_matmul_NT_local_i_c_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_i, factor=1)
	T_matmul_NT_local_i_c_o_o_o_i, T_matmul_NT_local_i_c_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_o_i, factor=4)
	T_matmul_NT_local_i_c_o_o_o_o, T_matmul_NT_local_i_c_o_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_o_o_i, factor=5)
	T_matmul_NT_local_j_c_o_i, T_matmul_NT_local_j_c_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c, factor=1)
	T_matmul_NT_local_j_c_o_o_i, T_matmul_NT_local_j_c_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_i, factor=1)
	T_matmul_NT_local_j_c_o_o_o_i, T_matmul_NT_local_j_c_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_o_i, factor=32)
	T_matmul_NT_local_j_c_o_o_o_o, T_matmul_NT_local_j_c_o_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_o_o_i, factor=1)
	T_matmul_NT_local_k_o_i, T_matmul_NT_local_k_i = s[T_matmul_NT_local].split(T_matmul_NT_local_k, factor=100)
	T_matmul_NT_local_k_o_o, T_matmul_NT_local_k_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_k_o_i, factor=1)
	s[T_matmul_NT_local].reorder(T_matmul_NT_local_i_c_o_o_o_o, T_matmul_NT_local_j_c_o_o_o_o, T_matmul_NT_local_i_c_o_o_o_i, T_matmul_NT_local_j_c_o_o_o_i, T_matmul_NT_local_i_c_o_o_i, T_matmul_NT_local_j_c_o_o_i, T_matmul_NT_local_k_o_o, T_matmul_NT_local_k_o_i, T_matmul_NT_local_i_c_o_i, T_matmul_NT_local_j_c_o_i, T_matmul_NT_local_k_i, T_matmul_NT_local_i_c_i, T_matmul_NT_local_j_c_i)
	T_matmul_NT_i_o_i, T_matmul_NT_i_i = s[T_matmul_NT].split(T_matmul_NT_i, factor=1)
	T_matmul_NT_i_o_o_i, T_matmul_NT_i_o_i = s[T_matmul_NT].split(T_matmul_NT_i_o_i, factor=4)
	T_matmul_NT_i_o_o_o, T_matmul_NT_i_o_o_i = s[T_matmul_NT].split(T_matmul_NT_i_o_o_i, factor=5)
	T_matmul_NT_j_o_i, T_matmul_NT_j_i = s[T_matmul_NT].split(T_matmul_NT_j, factor=1)
	T_matmul_NT_j_o_o_i, T_matmul_NT_j_o_i = s[T_matmul_NT].split(T_matmul_NT_j_o_i, factor=32)
	T_matmul_NT_j_o_o_o, T_matmul_NT_j_o_o_i = s[T_matmul_NT].split(T_matmul_NT_j_o_o_i, factor=1)
	s[T_matmul_NT].reorder(T_matmul_NT_i_o_o_o, T_matmul_NT_j_o_o_o, T_matmul_NT_i_o_o_i, T_matmul_NT_j_o_o_i, T_matmul_NT_i_o_i, T_matmul_NT_j_o_i, T_matmul_NT_i_i, T_matmul_NT_j_i)
	s[T_matmul_NT_local].compute_at(s[T_matmul_NT], T_matmul_NT_j_o_i)
	Y_shared = s.cache_read(Y, "shared", [T_matmul_NT_local])
	Y_shared_ax0, Y_shared_ax1 = tuple(Y_shared.op.axis)
	s[Y_shared].compute_at(s[T_matmul_NT_local], T_matmul_NT_local_k_o_o)
	X_shared = s.cache_read(X, "shared", [T_matmul_NT_local])
	X_shared_ax0, X_shared_ax1 = tuple(X_shared.op.axis)
	s[X_shared].compute_at(s[T_matmul_NT_local], T_matmul_NT_local_k_o_o)
	T_matmul_NT_i_o_o_o_j_o_o_o_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_o_o, T_matmul_NT_j_o_o_o)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
	T_matmul_NT_i_o_o_i_j_o_o_i_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_o_i, T_matmul_NT_j_o_o_i)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
	T_matmul_NT_i_o_i_j_o_i_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_i, T_matmul_NT_j_o_i)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
	Y_shared_ax0_ax1_fused = s[Y_shared].fuse(Y_shared_ax0, Y_shared_ax1)
	Y_shared_ax0_ax1_fused_o, Y_shared_ax0_ax1_fused_i = s[Y_shared].split(Y_shared_ax0_ax1_fused, factor=1)
	s[Y_shared].vectorize(Y_shared_ax0_ax1_fused_i)
	Y_shared_ax0_ax1_fused_o_o, Y_shared_ax0_ax1_fused_o_i = s[Y_shared].split(Y_shared_ax0_ax1_fused_o, factor=128)
	s[Y_shared].bind(Y_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
	X_shared_ax0_ax1_fused = s[X_shared].fuse(X_shared_ax0, X_shared_ax1)
	X_shared_ax0_ax1_fused_o, X_shared_ax0_ax1_fused_i = s[X_shared].split(X_shared_ax0_ax1_fused, factor=1)
	s[X_shared].vectorize(X_shared_ax0_ax1_fused_i)
	X_shared_ax0_ax1_fused_o_o, X_shared_ax0_ax1_fused_o_i = s[X_shared].split(X_shared_ax0_ax1_fused_o, factor=128)
	s[X_shared].bind(X_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
	s[T_matmul_NT_local].pragma(T_matmul_NT_local_i_c_o_o_o_o, "auto_unroll_max_step", 2500)
	s[T_matmul_NT_local].pragma(T_matmul_NT_local_i_c_o_o_o_o, "unroll_explicit", True)


def schedule_dense_2434(X, Y, T_matmul_NT, s):
	T_matmul_NT_i, T_matmul_NT_j, T_matmul_NT_k = tuple(T_matmul_NT.op.axis) + tuple(T_matmul_NT.op.reduce_axis)
	T_matmul_NT_local, = s.cache_write([T_matmul_NT], "local")
	T_matmul_NT_local_i_c, T_matmul_NT_local_j_c, T_matmul_NT_local_k = tuple(T_matmul_NT_local.op.axis) + tuple(T_matmul_NT_local.op.reduce_axis)
	T_matmul_NT_local_i_c_o_i, T_matmul_NT_local_i_c_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c, factor=6)
	T_matmul_NT_local_i_c_o_o_i, T_matmul_NT_local_i_c_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_i, factor=1)
	T_matmul_NT_local_i_c_o_o_o_i, T_matmul_NT_local_i_c_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_o_i, factor=8)
	T_matmul_NT_local_i_c_o_o_o_o, T_matmul_NT_local_i_c_o_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_o_o_i, factor=1)
	T_matmul_NT_local_j_c_o_i, T_matmul_NT_local_j_c_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c, factor=1)
	T_matmul_NT_local_j_c_o_o_i, T_matmul_NT_local_j_c_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_i, factor=1)
	T_matmul_NT_local_j_c_o_o_o_i, T_matmul_NT_local_j_c_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_o_i, factor=16)
	T_matmul_NT_local_j_c_o_o_o_o, T_matmul_NT_local_j_c_o_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_o_o_i, factor=4)
	T_matmul_NT_local_k_o_i, T_matmul_NT_local_k_i = s[T_matmul_NT_local].split(T_matmul_NT_local_k, factor=60)
	T_matmul_NT_local_k_o_o, T_matmul_NT_local_k_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_k_o_i, factor=1)
	s[T_matmul_NT_local].reorder(T_matmul_NT_local_i_c_o_o_o_o, T_matmul_NT_local_j_c_o_o_o_o, T_matmul_NT_local_i_c_o_o_o_i, T_matmul_NT_local_j_c_o_o_o_i, T_matmul_NT_local_i_c_o_o_i, T_matmul_NT_local_j_c_o_o_i, T_matmul_NT_local_k_o_o, T_matmul_NT_local_k_o_i, T_matmul_NT_local_i_c_o_i, T_matmul_NT_local_j_c_o_i, T_matmul_NT_local_k_i, T_matmul_NT_local_i_c_i, T_matmul_NT_local_j_c_i)
	T_matmul_NT_i_o_i, T_matmul_NT_i_i = s[T_matmul_NT].split(T_matmul_NT_i, factor=6)
	T_matmul_NT_i_o_o_i, T_matmul_NT_i_o_i = s[T_matmul_NT].split(T_matmul_NT_i_o_i, factor=8)
	T_matmul_NT_i_o_o_o, T_matmul_NT_i_o_o_i = s[T_matmul_NT].split(T_matmul_NT_i_o_o_i, factor=1)
	T_matmul_NT_j_o_i, T_matmul_NT_j_i = s[T_matmul_NT].split(T_matmul_NT_j, factor=1)
	T_matmul_NT_j_o_o_i, T_matmul_NT_j_o_i = s[T_matmul_NT].split(T_matmul_NT_j_o_i, factor=16)
	T_matmul_NT_j_o_o_o, T_matmul_NT_j_o_o_i = s[T_matmul_NT].split(T_matmul_NT_j_o_o_i, factor=4)
	s[T_matmul_NT].reorder(T_matmul_NT_i_o_o_o, T_matmul_NT_j_o_o_o, T_matmul_NT_i_o_o_i, T_matmul_NT_j_o_o_i, T_matmul_NT_i_o_i, T_matmul_NT_j_o_i, T_matmul_NT_i_i, T_matmul_NT_j_i)
	s[T_matmul_NT_local].compute_at(s[T_matmul_NT], T_matmul_NT_j_o_i)
	Y_shared = s.cache_read(Y, "shared", [T_matmul_NT_local])
	Y_shared_ax0, Y_shared_ax1 = tuple(Y_shared.op.axis)
	s[Y_shared].compute_at(s[T_matmul_NT_local], T_matmul_NT_local_k_o_o)
	X_shared = s.cache_read(X, "shared", [T_matmul_NT_local])
	X_shared_ax0, X_shared_ax1 = tuple(X_shared.op.axis)
	s[X_shared].compute_at(s[T_matmul_NT_local], T_matmul_NT_local_k_o_o)
	T_matmul_NT_i_o_o_o_j_o_o_o_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_o_o, T_matmul_NT_j_o_o_o)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
	T_matmul_NT_i_o_o_i_j_o_o_i_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_o_i, T_matmul_NT_j_o_o_i)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
	T_matmul_NT_i_o_i_j_o_i_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_i, T_matmul_NT_j_o_i)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
	Y_shared_ax0_ax1_fused = s[Y_shared].fuse(Y_shared_ax0, Y_shared_ax1)
	Y_shared_ax0_ax1_fused_o, Y_shared_ax0_ax1_fused_i = s[Y_shared].split(Y_shared_ax0_ax1_fused, factor=1)
	s[Y_shared].vectorize(Y_shared_ax0_ax1_fused_i)
	Y_shared_ax0_ax1_fused_o_o, Y_shared_ax0_ax1_fused_o_i = s[Y_shared].split(Y_shared_ax0_ax1_fused_o, factor=128)
	s[Y_shared].bind(Y_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
	X_shared_ax0_ax1_fused = s[X_shared].fuse(X_shared_ax0, X_shared_ax1)
	X_shared_ax0_ax1_fused_o, X_shared_ax0_ax1_fused_i = s[X_shared].split(X_shared_ax0_ax1_fused, factor=1)
	s[X_shared].vectorize(X_shared_ax0_ax1_fused_i)
	X_shared_ax0_ax1_fused_o_o, X_shared_ax0_ax1_fused_o_i = s[X_shared].split(X_shared_ax0_ax1_fused_o, factor=128)
	s[X_shared].bind(X_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
	s[T_matmul_NT_local].pragma(T_matmul_NT_local_i_c_o_o_o_o, "auto_unroll_max_step", 2500)
	s[T_matmul_NT_local].pragma(T_matmul_NT_local_i_c_o_o_o_o, "unroll_explicit", True)


def schedule_dense_2968(X, Y, T_matmul_NT, s):
	T_matmul_NT_i, T_matmul_NT_j, T_matmul_NT_k = tuple(T_matmul_NT.op.axis) + tuple(T_matmul_NT.op.reduce_axis)
	T_matmul_NT_local, = s.cache_write([T_matmul_NT], "local")
	T_matmul_NT_local_i_c, T_matmul_NT_local_j_c, T_matmul_NT_local_k = tuple(T_matmul_NT_local.op.axis) + tuple(T_matmul_NT_local.op.reduce_axis)
	T_matmul_NT_local_i_c_o_i, T_matmul_NT_local_i_c_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c, factor=1)
	T_matmul_NT_local_i_c_o_o_i, T_matmul_NT_local_i_c_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_i, factor=1)
	T_matmul_NT_local_i_c_o_o_o_i, T_matmul_NT_local_i_c_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_o_i, factor=8)
	T_matmul_NT_local_i_c_o_o_o_o, T_matmul_NT_local_i_c_o_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_o_o_i, factor=8)
	T_matmul_NT_local_j_c_o_i, T_matmul_NT_local_j_c_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c, factor=1)
	T_matmul_NT_local_j_c_o_o_i, T_matmul_NT_local_j_c_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_i, factor=1)
	T_matmul_NT_local_j_c_o_o_o_i, T_matmul_NT_local_j_c_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_o_i, factor=16)
	T_matmul_NT_local_j_c_o_o_o_o, T_matmul_NT_local_j_c_o_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_o_o_i, factor=4)
	T_matmul_NT_local_k_o_i, T_matmul_NT_local_k_i = s[T_matmul_NT_local].split(T_matmul_NT_local_k, factor=24)
	T_matmul_NT_local_k_o_o, T_matmul_NT_local_k_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_k_o_i, factor=1)
	s[T_matmul_NT_local].reorder(T_matmul_NT_local_i_c_o_o_o_o, T_matmul_NT_local_j_c_o_o_o_o, T_matmul_NT_local_i_c_o_o_o_i, T_matmul_NT_local_j_c_o_o_o_i, T_matmul_NT_local_i_c_o_o_i, T_matmul_NT_local_j_c_o_o_i, T_matmul_NT_local_k_o_o, T_matmul_NT_local_k_o_i, T_matmul_NT_local_i_c_o_i, T_matmul_NT_local_j_c_o_i, T_matmul_NT_local_k_i, T_matmul_NT_local_i_c_i, T_matmul_NT_local_j_c_i)
	T_matmul_NT_i_o_i, T_matmul_NT_i_i = s[T_matmul_NT].split(T_matmul_NT_i, factor=1)
	T_matmul_NT_i_o_o_i, T_matmul_NT_i_o_i = s[T_matmul_NT].split(T_matmul_NT_i_o_i, factor=8)
	T_matmul_NT_i_o_o_o, T_matmul_NT_i_o_o_i = s[T_matmul_NT].split(T_matmul_NT_i_o_o_i, factor=8)
	T_matmul_NT_j_o_i, T_matmul_NT_j_i = s[T_matmul_NT].split(T_matmul_NT_j, factor=1)
	T_matmul_NT_j_o_o_i, T_matmul_NT_j_o_i = s[T_matmul_NT].split(T_matmul_NT_j_o_i, factor=16)
	T_matmul_NT_j_o_o_o, T_matmul_NT_j_o_o_i = s[T_matmul_NT].split(T_matmul_NT_j_o_o_i, factor=4)
	s[T_matmul_NT].reorder(T_matmul_NT_i_o_o_o, T_matmul_NT_j_o_o_o, T_matmul_NT_i_o_o_i, T_matmul_NT_j_o_o_i, T_matmul_NT_i_o_i, T_matmul_NT_j_o_i, T_matmul_NT_i_i, T_matmul_NT_j_i)
	s[T_matmul_NT_local].compute_at(s[T_matmul_NT], T_matmul_NT_j_o_i)
	Y_shared = s.cache_read(Y, "shared", [T_matmul_NT_local])
	Y_shared_ax0, Y_shared_ax1 = tuple(Y_shared.op.axis)
	s[Y_shared].compute_at(s[T_matmul_NT_local], T_matmul_NT_local_k_o_o)
	X_shared = s.cache_read(X, "shared", [T_matmul_NT_local])
	X_shared_ax0, X_shared_ax1 = tuple(X_shared.op.axis)
	s[X_shared].compute_at(s[T_matmul_NT_local], T_matmul_NT_local_k_o_o)
	T_matmul_NT_i_o_o_o_j_o_o_o_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_o_o, T_matmul_NT_j_o_o_o)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
	T_matmul_NT_i_o_o_i_j_o_o_i_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_o_i, T_matmul_NT_j_o_o_i)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
	T_matmul_NT_i_o_i_j_o_i_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_i, T_matmul_NT_j_o_i)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
	Y_shared_ax0_ax1_fused = s[Y_shared].fuse(Y_shared_ax0, Y_shared_ax1)
	Y_shared_ax0_ax1_fused_o, Y_shared_ax0_ax1_fused_i = s[Y_shared].split(Y_shared_ax0_ax1_fused, factor=1)
	s[Y_shared].vectorize(Y_shared_ax0_ax1_fused_i)
	Y_shared_ax0_ax1_fused_o_o, Y_shared_ax0_ax1_fused_o_i = s[Y_shared].split(Y_shared_ax0_ax1_fused_o, factor=128)
	s[Y_shared].bind(Y_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
	X_shared_ax0_ax1_fused = s[X_shared].fuse(X_shared_ax0, X_shared_ax1)
	X_shared_ax0_ax1_fused_o, X_shared_ax0_ax1_fused_i = s[X_shared].split(X_shared_ax0_ax1_fused, factor=1)
	s[X_shared].vectorize(X_shared_ax0_ax1_fused_i)
	X_shared_ax0_ax1_fused_o_o, X_shared_ax0_ax1_fused_o_i = s[X_shared].split(X_shared_ax0_ax1_fused_o, factor=128)
	s[X_shared].bind(X_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
	s[T_matmul_NT_local].pragma(T_matmul_NT_local_i_c_o_o_o_o, "auto_unroll_max_step", 2500)
	s[T_matmul_NT_local].pragma(T_matmul_NT_local_i_c_o_o_o_o, "unroll_explicit", True)


def schedule_dense_3216(X, Y, T_matmul_NT, s):
	T_matmul_NT_i, T_matmul_NT_j, T_matmul_NT_k = tuple(T_matmul_NT.op.axis) + tuple(T_matmul_NT.op.reduce_axis)
	T_matmul_NT_local, = s.cache_write([T_matmul_NT], "local")
	T_matmul_NT_local_i_c, T_matmul_NT_local_j_c, T_matmul_NT_local_k = tuple(T_matmul_NT_local.op.axis) + tuple(T_matmul_NT_local.op.reduce_axis)
	T_matmul_NT_local_i_c_o_i, T_matmul_NT_local_i_c_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c, factor=10)
	T_matmul_NT_local_i_c_o_o_i, T_matmul_NT_local_i_c_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_i, factor=1)
	T_matmul_NT_local_i_c_o_o_o_i, T_matmul_NT_local_i_c_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_o_i, factor=8)
	T_matmul_NT_local_i_c_o_o_o_o, T_matmul_NT_local_i_c_o_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_o_o_i, factor=1)
	T_matmul_NT_local_j_c_o_i, T_matmul_NT_local_j_c_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c, factor=1)
	T_matmul_NT_local_j_c_o_o_i, T_matmul_NT_local_j_c_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_i, factor=1)
	T_matmul_NT_local_j_c_o_o_o_i, T_matmul_NT_local_j_c_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_o_i, factor=16)
	T_matmul_NT_local_j_c_o_o_o_o, T_matmul_NT_local_j_c_o_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_o_o_i, factor=4)
	T_matmul_NT_local_k_o_i, T_matmul_NT_local_k_i = s[T_matmul_NT_local].split(T_matmul_NT_local_k, factor=24)
	T_matmul_NT_local_k_o_o, T_matmul_NT_local_k_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_k_o_i, factor=1)
	s[T_matmul_NT_local].reorder(T_matmul_NT_local_i_c_o_o_o_o, T_matmul_NT_local_j_c_o_o_o_o, T_matmul_NT_local_i_c_o_o_o_i, T_matmul_NT_local_j_c_o_o_o_i, T_matmul_NT_local_i_c_o_o_i, T_matmul_NT_local_j_c_o_o_i, T_matmul_NT_local_k_o_o, T_matmul_NT_local_k_o_i, T_matmul_NT_local_i_c_o_i, T_matmul_NT_local_j_c_o_i, T_matmul_NT_local_k_i, T_matmul_NT_local_i_c_i, T_matmul_NT_local_j_c_i)
	T_matmul_NT_i_o_i, T_matmul_NT_i_i = s[T_matmul_NT].split(T_matmul_NT_i, factor=10)
	T_matmul_NT_i_o_o_i, T_matmul_NT_i_o_i = s[T_matmul_NT].split(T_matmul_NT_i_o_i, factor=8)
	T_matmul_NT_i_o_o_o, T_matmul_NT_i_o_o_i = s[T_matmul_NT].split(T_matmul_NT_i_o_o_i, factor=1)
	T_matmul_NT_j_o_i, T_matmul_NT_j_i = s[T_matmul_NT].split(T_matmul_NT_j, factor=1)
	T_matmul_NT_j_o_o_i, T_matmul_NT_j_o_i = s[T_matmul_NT].split(T_matmul_NT_j_o_i, factor=16)
	T_matmul_NT_j_o_o_o, T_matmul_NT_j_o_o_i = s[T_matmul_NT].split(T_matmul_NT_j_o_o_i, factor=4)
	s[T_matmul_NT].reorder(T_matmul_NT_i_o_o_o, T_matmul_NT_j_o_o_o, T_matmul_NT_i_o_o_i, T_matmul_NT_j_o_o_i, T_matmul_NT_i_o_i, T_matmul_NT_j_o_i, T_matmul_NT_i_i, T_matmul_NT_j_i)
	s[T_matmul_NT_local].compute_at(s[T_matmul_NT], T_matmul_NT_j_o_i)
	Y_shared = s.cache_read(Y, "shared", [T_matmul_NT_local])
	Y_shared_ax0, Y_shared_ax1 = tuple(Y_shared.op.axis)
	s[Y_shared].compute_at(s[T_matmul_NT_local], T_matmul_NT_local_k_o_o)
	X_shared = s.cache_read(X, "shared", [T_matmul_NT_local])
	X_shared_ax0, X_shared_ax1 = tuple(X_shared.op.axis)
	s[X_shared].compute_at(s[T_matmul_NT_local], T_matmul_NT_local_k_o_o)
	T_matmul_NT_i_o_o_o_j_o_o_o_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_o_o, T_matmul_NT_j_o_o_o)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
	T_matmul_NT_i_o_o_i_j_o_o_i_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_o_i, T_matmul_NT_j_o_o_i)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
	T_matmul_NT_i_o_i_j_o_i_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_i, T_matmul_NT_j_o_i)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
	Y_shared_ax0_ax1_fused = s[Y_shared].fuse(Y_shared_ax0, Y_shared_ax1)
	Y_shared_ax0_ax1_fused_o, Y_shared_ax0_ax1_fused_i = s[Y_shared].split(Y_shared_ax0_ax1_fused, factor=1)
	s[Y_shared].vectorize(Y_shared_ax0_ax1_fused_i)
	Y_shared_ax0_ax1_fused_o_o, Y_shared_ax0_ax1_fused_o_i = s[Y_shared].split(Y_shared_ax0_ax1_fused_o, factor=128)
	s[Y_shared].bind(Y_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
	X_shared_ax0_ax1_fused = s[X_shared].fuse(X_shared_ax0, X_shared_ax1)
	X_shared_ax0_ax1_fused_o, X_shared_ax0_ax1_fused_i = s[X_shared].split(X_shared_ax0_ax1_fused, factor=1)
	s[X_shared].vectorize(X_shared_ax0_ax1_fused_i)
	X_shared_ax0_ax1_fused_o_o, X_shared_ax0_ax1_fused_o_i = s[X_shared].split(X_shared_ax0_ax1_fused_o, factor=128)
	s[X_shared].bind(X_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
	s[T_matmul_NT_local].pragma(T_matmul_NT_local_i_c_o_o_o_o, "auto_unroll_max_step", 2500)
	s[T_matmul_NT_local].pragma(T_matmul_NT_local_i_c_o_o_o_o, "unroll_explicit", True)


def schedule_dense_3529(X, Y, T_matmul_NT, s):
	T_matmul_NT_i, T_matmul_NT_j, T_matmul_NT_k = tuple(T_matmul_NT.op.axis) + tuple(T_matmul_NT.op.reduce_axis)
	T_matmul_NT_local, = s.cache_write([T_matmul_NT], "local")
	T_matmul_NT_local_i_c, T_matmul_NT_local_j_c, T_matmul_NT_local_k = tuple(T_matmul_NT_local.op.axis) + tuple(T_matmul_NT_local.op.reduce_axis)
	T_matmul_NT_local_i_c_o_i, T_matmul_NT_local_i_c_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c, factor=25)
	T_matmul_NT_local_i_c_o_o_i, T_matmul_NT_local_i_c_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_i, factor=1)
	T_matmul_NT_local_i_c_o_o_o_i, T_matmul_NT_local_i_c_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_o_i, factor=2)
	T_matmul_NT_local_i_c_o_o_o_o, T_matmul_NT_local_i_c_o_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_o_o_i, factor=1)
	T_matmul_NT_local_j_c_o_i, T_matmul_NT_local_j_c_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c, factor=1)
	T_matmul_NT_local_j_c_o_o_i, T_matmul_NT_local_j_c_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_i, factor=1)
	T_matmul_NT_local_j_c_o_o_o_i, T_matmul_NT_local_j_c_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_o_i, factor=64)
	T_matmul_NT_local_j_c_o_o_o_o, T_matmul_NT_local_j_c_o_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_o_o_i, factor=2)
	T_matmul_NT_local_k_o_i, T_matmul_NT_local_k_i = s[T_matmul_NT_local].split(T_matmul_NT_local_k, factor=24)
	T_matmul_NT_local_k_o_o, T_matmul_NT_local_k_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_k_o_i, factor=1)
	s[T_matmul_NT_local].reorder(T_matmul_NT_local_i_c_o_o_o_o, T_matmul_NT_local_j_c_o_o_o_o, T_matmul_NT_local_i_c_o_o_o_i, T_matmul_NT_local_j_c_o_o_o_i, T_matmul_NT_local_i_c_o_o_i, T_matmul_NT_local_j_c_o_o_i, T_matmul_NT_local_k_o_o, T_matmul_NT_local_k_o_i, T_matmul_NT_local_i_c_o_i, T_matmul_NT_local_j_c_o_i, T_matmul_NT_local_k_i, T_matmul_NT_local_i_c_i, T_matmul_NT_local_j_c_i)
	T_matmul_NT_i_o_i, T_matmul_NT_i_i = s[T_matmul_NT].split(T_matmul_NT_i, factor=25)
	T_matmul_NT_i_o_o_i, T_matmul_NT_i_o_i = s[T_matmul_NT].split(T_matmul_NT_i_o_i, factor=2)
	T_matmul_NT_i_o_o_o, T_matmul_NT_i_o_o_i = s[T_matmul_NT].split(T_matmul_NT_i_o_o_i, factor=1)
	T_matmul_NT_j_o_i, T_matmul_NT_j_i = s[T_matmul_NT].split(T_matmul_NT_j, factor=1)
	T_matmul_NT_j_o_o_i, T_matmul_NT_j_o_i = s[T_matmul_NT].split(T_matmul_NT_j_o_i, factor=64)
	T_matmul_NT_j_o_o_o, T_matmul_NT_j_o_o_i = s[T_matmul_NT].split(T_matmul_NT_j_o_o_i, factor=2)
	s[T_matmul_NT].reorder(T_matmul_NT_i_o_o_o, T_matmul_NT_j_o_o_o, T_matmul_NT_i_o_o_i, T_matmul_NT_j_o_o_i, T_matmul_NT_i_o_i, T_matmul_NT_j_o_i, T_matmul_NT_i_i, T_matmul_NT_j_i)
	s[T_matmul_NT_local].compute_at(s[T_matmul_NT], T_matmul_NT_j_o_i)
	Y_shared = s.cache_read(Y, "shared", [T_matmul_NT_local])
	Y_shared_ax0, Y_shared_ax1 = tuple(Y_shared.op.axis)
	s[Y_shared].compute_at(s[T_matmul_NT_local], T_matmul_NT_local_k_o_o)
	X_shared = s.cache_read(X, "shared", [T_matmul_NT_local])
	X_shared_ax0, X_shared_ax1 = tuple(X_shared.op.axis)
	s[X_shared].compute_at(s[T_matmul_NT_local], T_matmul_NT_local_k_o_o)
	T_matmul_NT_i_o_o_o_j_o_o_o_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_o_o, T_matmul_NT_j_o_o_o)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
	T_matmul_NT_i_o_o_i_j_o_o_i_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_o_i, T_matmul_NT_j_o_o_i)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
	T_matmul_NT_i_o_i_j_o_i_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_i, T_matmul_NT_j_o_i)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
	Y_shared_ax0_ax1_fused = s[Y_shared].fuse(Y_shared_ax0, Y_shared_ax1)
	Y_shared_ax0_ax1_fused_o, Y_shared_ax0_ax1_fused_i = s[Y_shared].split(Y_shared_ax0_ax1_fused, factor=1)
	s[Y_shared].vectorize(Y_shared_ax0_ax1_fused_i)
	Y_shared_ax0_ax1_fused_o_o, Y_shared_ax0_ax1_fused_o_i = s[Y_shared].split(Y_shared_ax0_ax1_fused_o, factor=128)
	s[Y_shared].bind(Y_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
	X_shared_ax0_ax1_fused = s[X_shared].fuse(X_shared_ax0, X_shared_ax1)
	X_shared_ax0_ax1_fused_o, X_shared_ax0_ax1_fused_i = s[X_shared].split(X_shared_ax0_ax1_fused, factor=1)
	s[X_shared].vectorize(X_shared_ax0_ax1_fused_i)
	X_shared_ax0_ax1_fused_o_o, X_shared_ax0_ax1_fused_o_i = s[X_shared].split(X_shared_ax0_ax1_fused_o, factor=128)
	s[X_shared].bind(X_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
	s[T_matmul_NT_local].pragma(T_matmul_NT_local_i_c_o_o_o_o, "auto_unroll_max_step", 2500)
	s[T_matmul_NT_local].pragma(T_matmul_NT_local_i_c_o_o_o_o, "unroll_explicit", True)


def schedule_dense_3663(X, Y, T_matmul_NT, s):
	T_matmul_NT_i, T_matmul_NT_j, T_matmul_NT_k = tuple(T_matmul_NT.op.axis) + tuple(T_matmul_NT.op.reduce_axis)
	T_matmul_NT_local, = s.cache_write([T_matmul_NT], "local")
	T_matmul_NT_local_i_c, T_matmul_NT_local_j_c, T_matmul_NT_local_k = tuple(T_matmul_NT_local.op.axis) + tuple(T_matmul_NT_local.op.reduce_axis)
	T_matmul_NT_local_i_c_o_i, T_matmul_NT_local_i_c_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c, factor=27)
	T_matmul_NT_local_i_c_o_o_i, T_matmul_NT_local_i_c_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_i, factor=1)
	T_matmul_NT_local_i_c_o_o_o_i, T_matmul_NT_local_i_c_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_o_i, factor=4)
	T_matmul_NT_local_i_c_o_o_o_o, T_matmul_NT_local_i_c_o_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_i_c_o_o_o_i, factor=1)
	T_matmul_NT_local_j_c_o_i, T_matmul_NT_local_j_c_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c, factor=1)
	T_matmul_NT_local_j_c_o_o_i, T_matmul_NT_local_j_c_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_i, factor=1)
	T_matmul_NT_local_j_c_o_o_o_i, T_matmul_NT_local_j_c_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_o_i, factor=32)
	T_matmul_NT_local_j_c_o_o_o_o, T_matmul_NT_local_j_c_o_o_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_j_c_o_o_o_i, factor=2)
	T_matmul_NT_local_k_o_i, T_matmul_NT_local_k_i = s[T_matmul_NT_local].split(T_matmul_NT_local_k, factor=24)
	T_matmul_NT_local_k_o_o, T_matmul_NT_local_k_o_i = s[T_matmul_NT_local].split(T_matmul_NT_local_k_o_i, factor=1)
	s[T_matmul_NT_local].reorder(T_matmul_NT_local_i_c_o_o_o_o, T_matmul_NT_local_j_c_o_o_o_o, T_matmul_NT_local_i_c_o_o_o_i, T_matmul_NT_local_j_c_o_o_o_i, T_matmul_NT_local_i_c_o_o_i, T_matmul_NT_local_j_c_o_o_i, T_matmul_NT_local_k_o_o, T_matmul_NT_local_k_o_i, T_matmul_NT_local_i_c_o_i, T_matmul_NT_local_j_c_o_i, T_matmul_NT_local_k_i, T_matmul_NT_local_i_c_i, T_matmul_NT_local_j_c_i)
	T_matmul_NT_i_o_i, T_matmul_NT_i_i = s[T_matmul_NT].split(T_matmul_NT_i, factor=27)
	T_matmul_NT_i_o_o_i, T_matmul_NT_i_o_i = s[T_matmul_NT].split(T_matmul_NT_i_o_i, factor=4)
	T_matmul_NT_i_o_o_o, T_matmul_NT_i_o_o_i = s[T_matmul_NT].split(T_matmul_NT_i_o_o_i, factor=1)
	T_matmul_NT_j_o_i, T_matmul_NT_j_i = s[T_matmul_NT].split(T_matmul_NT_j, factor=1)
	T_matmul_NT_j_o_o_i, T_matmul_NT_j_o_i = s[T_matmul_NT].split(T_matmul_NT_j_o_i, factor=32)
	T_matmul_NT_j_o_o_o, T_matmul_NT_j_o_o_i = s[T_matmul_NT].split(T_matmul_NT_j_o_o_i, factor=2)
	s[T_matmul_NT].reorder(T_matmul_NT_i_o_o_o, T_matmul_NT_j_o_o_o, T_matmul_NT_i_o_o_i, T_matmul_NT_j_o_o_i, T_matmul_NT_i_o_i, T_matmul_NT_j_o_i, T_matmul_NT_i_i, T_matmul_NT_j_i)
	s[T_matmul_NT_local].compute_at(s[T_matmul_NT], T_matmul_NT_j_o_i)
	Y_shared = s.cache_read(Y, "shared", [T_matmul_NT_local])
	Y_shared_ax0, Y_shared_ax1 = tuple(Y_shared.op.axis)
	s[Y_shared].compute_at(s[T_matmul_NT_local], T_matmul_NT_local_k_o_o)
	X_shared = s.cache_read(X, "shared", [T_matmul_NT_local])
	X_shared_ax0, X_shared_ax1 = tuple(X_shared.op.axis)
	s[X_shared].compute_at(s[T_matmul_NT_local], T_matmul_NT_local_k_o_o)
	T_matmul_NT_i_o_o_o_j_o_o_o_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_o_o, T_matmul_NT_j_o_o_o)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_o_o_j_o_o_o_fused, te.thread_axis("blockIdx.x"))
	T_matmul_NT_i_o_o_i_j_o_o_i_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_o_i, T_matmul_NT_j_o_o_i)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_o_i_j_o_o_i_fused, te.thread_axis("vthread"))
	T_matmul_NT_i_o_i_j_o_i_fused = s[T_matmul_NT].fuse(T_matmul_NT_i_o_i, T_matmul_NT_j_o_i)
	s[T_matmul_NT].bind(T_matmul_NT_i_o_i_j_o_i_fused, te.thread_axis("threadIdx.x"))
	Y_shared_ax0_ax1_fused = s[Y_shared].fuse(Y_shared_ax0, Y_shared_ax1)
	Y_shared_ax0_ax1_fused_o, Y_shared_ax0_ax1_fused_i = s[Y_shared].split(Y_shared_ax0_ax1_fused, factor=1)
	s[Y_shared].vectorize(Y_shared_ax0_ax1_fused_i)
	Y_shared_ax0_ax1_fused_o_o, Y_shared_ax0_ax1_fused_o_i = s[Y_shared].split(Y_shared_ax0_ax1_fused_o, factor=128)
	s[Y_shared].bind(Y_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
	X_shared_ax0_ax1_fused = s[X_shared].fuse(X_shared_ax0, X_shared_ax1)
	X_shared_ax0_ax1_fused_o, X_shared_ax0_ax1_fused_i = s[X_shared].split(X_shared_ax0_ax1_fused, factor=1)
	s[X_shared].vectorize(X_shared_ax0_ax1_fused_i)
	X_shared_ax0_ax1_fused_o_o, X_shared_ax0_ax1_fused_o_i = s[X_shared].split(X_shared_ax0_ax1_fused_o, factor=128)
	s[X_shared].bind(X_shared_ax0_ax1_fused_o_i, te.thread_axis("threadIdx.x"))
	s[T_matmul_NT_local].pragma(T_matmul_NT_local_i_c_o_o_o_o, "auto_unroll_max_step", 2500)
	s[T_matmul_NT_local].pragma(T_matmul_NT_local_i_c_o_o_o_o, "unroll_explicit", True)


def get_dispatch_dict():
	return {0: [3.963562358859699e-05, 822], 1: [0.00010215408883139286, 2968], 2: [0.00016965836124911287, 3216], 3: [0.0002401644432783608, 2434], 4: [0.0002910769297395518, 3663], 5: [0.0003607722533632287, 3663], 6: [0.0004295205916370106, 3663], 7: [0.00046907220213799803, 3529]}
def get_task_shapes():
	return [(80, 2304, 768), (384, 2304, 768), (688, 2304, 768), (992, 2304, 768), (1296, 2304, 768), (1600, 2304, 768), (1904, 2304, 768), (2048, 2304, 768)]
def get_selected_msps():
	return {822: [20, 32, 100], 2434: [48, 64, 60], 2968: [64, 64, 24], 3216: [80, 64, 24], 3529: [50, 128, 24], 3663: [108, 64, 24]}
def get_selected_msp_config():
	return {822: '{"i": [["[\\"dense_layer\\", [20, 100], [32, 100]]", "cuda -keys=cuda,gpu -arch=sm_80 -max_num_threads=1024 -thread_warp_size=32", [-1, 16, 64, 49152, 2147483647, 1024, 8, 32], "", 0, []], [[], [["CHW", 2, "local"], ["SP", 2, 0, 2160, [5, 4, 1, 1], 1], ["SP", 2, 5, 1280, [1, 32, 1, 1], 1], ["SP", 2, 10, 192, [1, 100], 1], ["RE", 2, [0, 5, 1, 6, 2, 7, 10, 11, 3, 8, 12, 4, 9]], ["FSP", 3, 0, 1, 3], ["FSP", 3, 4, 2, 3], ["RE", 3, [0, 4, 1, 5, 2, 6, 3, 7]], ["CA", 2, 3, 5], ["CHR", 1, "shared", [2]], ["CA", 2, 3, 6], ["CHR", 0, "shared", [3]], ["CA", 1, 4, 6], ["FU", 5, [0, 1]], ["AN", 5, 0, 5], ["FU", 5, [1, 2]], ["AN", 5, 1, 4], ["FU", 5, [2, 3]], ["AN", 5, 2, 6], ["FU", 3, [0, 1]], ["SP", 3, 0, 24, [1], 1], ["AN", 3, 1, 2], ["FFSP", 3, 0, [2, 1], 1, 1], ["AN", 3, 1, 6], ["FU", 1, [0, 1]], ["SP", 1, 0, 240, [1], 1], ["AN", 1, 1, 2], ["FFSP", 1, 0, [2, 1], 1, 1], ["AN", 1, 1, 6], ["PR", 4, 0, "auto_unroll_max_step$2500"]]]], "r": [[0], 0, 0, 0], "v": "v0.6"}\n', 2434: '{"i": [["[\\"dense_layer\\", [48, 60], [64, 60]]", "cuda -keys=cuda,gpu -arch=sm_80 -max_num_threads=1024 -thread_warp_size=32", [-1, 16, 64, 49152, 2147483647, 1024, 8, 32], "", 0, []], [[], [["CHW", 2, "local"], ["SP", 2, 0, 2160, [1, 8, 1, 6], 1], ["SP", 2, 5, 1280, [4, 16, 1, 1], 1], ["SP", 2, 10, 192, [1, 60], 1], ["RE", 2, [0, 5, 1, 6, 2, 7, 10, 11, 3, 8, 12, 4, 9]], ["FSP", 3, 0, 1, 3], ["FSP", 3, 4, 2, 3], ["RE", 3, [0, 4, 1, 5, 2, 6, 3, 7]], ["CA", 2, 3, 5], ["CHR", 1, "shared", [2]], ["CA", 2, 3, 6], ["CHR", 0, "shared", [3]], ["CA", 1, 4, 6], ["FU", 5, [0, 1]], ["AN", 5, 0, 5], ["FU", 5, [1, 2]], ["AN", 5, 1, 4], ["FU", 5, [2, 3]], ["AN", 5, 2, 6], ["FU", 3, [0, 1]], ["SP", 3, 0, 24, [1], 1], ["AN", 3, 1, 2], ["FFSP", 3, 0, [2, 1], 1, 1], ["AN", 3, 1, 6], ["FU", 1, [0, 1]], ["SP", 1, 0, 240, [1], 1], ["AN", 1, 1, 2], ["FFSP", 1, 0, [2, 1], 1, 1], ["AN", 1, 1, 6], ["PR", 4, 0, "auto_unroll_max_step$2500"]]]], "r": [[0], 0, 0, 0], "v": "v0.6"}\n', 2968: '{"i": [["[\\"dense_layer\\", [64, 24], [64, 24]]", "cuda -keys=cuda,gpu -arch=sm_80 -max_num_threads=1024 -thread_warp_size=32", [-1, 16, 64, 49152, 2147483647, 1024, 8, 32], "", 0, []], [[], [["CHW", 2, "local"], ["SP", 2, 0, 2160, [8, 8, 1, 1], 1], ["SP", 2, 5, 1280, [4, 16, 1, 1], 1], ["SP", 2, 10, 192, [1, 24], 1], ["RE", 2, [0, 5, 1, 6, 2, 7, 10, 11, 3, 8, 12, 4, 9]], ["FSP", 3, 0, 1, 3], ["FSP", 3, 4, 2, 3], ["RE", 3, [0, 4, 1, 5, 2, 6, 3, 7]], ["CA", 2, 3, 5], ["CHR", 1, "shared", [2]], ["CA", 2, 3, 6], ["CHR", 0, "shared", [3]], ["CA", 1, 4, 6], ["FU", 5, [0, 1]], ["AN", 5, 0, 5], ["FU", 5, [1, 2]], ["AN", 5, 1, 4], ["FU", 5, [2, 3]], ["AN", 5, 2, 6], ["FU", 3, [0, 1]], ["SP", 3, 0, 24, [1], 1], ["AN", 3, 1, 2], ["FFSP", 3, 0, [2, 1], 1, 1], ["AN", 3, 1, 6], ["FU", 1, [0, 1]], ["SP", 1, 0, 240, [1], 1], ["AN", 1, 1, 2], ["FFSP", 1, 0, [2, 1], 1, 1], ["AN", 1, 1, 6], ["PR", 4, 0, "auto_unroll_max_step$2500"]]]], "r": [[0], 0, 0, 0], "v": "v0.6"}\n', 3216: '{"i": [["[\\"dense_layer\\", [80, 24], [64, 24]]", "cuda -keys=cuda,gpu -arch=sm_80 -max_num_threads=1024 -thread_warp_size=32", [-1, 16, 64, 49152, 2147483647, 1024, 8, 32], "", 0, []], [[], [["CHW", 2, "local"], ["SP", 2, 0, 2160, [1, 8, 1, 10], 1], ["SP", 2, 5, 1280, [4, 16, 1, 1], 1], ["SP", 2, 10, 192, [1, 24], 1], ["RE", 2, [0, 5, 1, 6, 2, 7, 10, 11, 3, 8, 12, 4, 9]], ["FSP", 3, 0, 1, 3], ["FSP", 3, 4, 2, 3], ["RE", 3, [0, 4, 1, 5, 2, 6, 3, 7]], ["CA", 2, 3, 5], ["CHR", 1, "shared", [2]], ["CA", 2, 3, 6], ["CHR", 0, "shared", [3]], ["CA", 1, 4, 6], ["FU", 5, [0, 1]], ["AN", 5, 0, 5], ["FU", 5, [1, 2]], ["AN", 5, 1, 4], ["FU", 5, [2, 3]], ["AN", 5, 2, 6], ["FU", 3, [0, 1]], ["SP", 3, 0, 24, [1], 1], ["AN", 3, 1, 2], ["FFSP", 3, 0, [2, 1], 1, 1], ["AN", 3, 1, 6], ["FU", 1, [0, 1]], ["SP", 1, 0, 240, [1], 1], ["AN", 1, 1, 2], ["FFSP", 1, 0, [2, 1], 1, 1], ["AN", 1, 1, 6], ["PR", 4, 0, "auto_unroll_max_step$2500"]]]], "r": [[0], 0, 0, 0], "v": "v0.6"}\n', 3529: '{"i": [["[\\"dense_layer\\", [50, 24], [128, 24]]", "cuda -keys=cuda,gpu -arch=sm_80 -max_num_threads=1024 -thread_warp_size=32", [-1, 16, 64, 49152, 2147483647, 1024, 8, 32], "", 0, []], [[], [["CHW", 2, "local"], ["SP", 2, 0, 2160, [1, 2, 1, 25], 1], ["SP", 2, 5, 1280, [2, 64, 1, 1], 1], ["SP", 2, 10, 192, [1, 24], 1], ["RE", 2, [0, 5, 1, 6, 2, 7, 10, 11, 3, 8, 12, 4, 9]], ["FSP", 3, 0, 1, 3], ["FSP", 3, 4, 2, 3], ["RE", 3, [0, 4, 1, 5, 2, 6, 3, 7]], ["CA", 2, 3, 5], ["CHR", 1, "shared", [2]], ["CA", 2, 3, 6], ["CHR", 0, "shared", [3]], ["CA", 1, 4, 6], ["FU", 5, [0, 1]], ["AN", 5, 0, 5], ["FU", 5, [1, 2]], ["AN", 5, 1, 4], ["FU", 5, [2, 3]], ["AN", 5, 2, 6], ["FU", 3, [0, 1]], ["SP", 3, 0, 24, [1], 1], ["AN", 3, 1, 2], ["FFSP", 3, 0, [2, 1], 1, 1], ["AN", 3, 1, 6], ["FU", 1, [0, 1]], ["SP", 1, 0, 240, [1], 1], ["AN", 1, 1, 2], ["FFSP", 1, 0, [2, 1], 1, 1], ["AN", 1, 1, 6], ["PR", 4, 0, "auto_unroll_max_step$2500"]]]], "r": [[0], 0, 0, 0], "v": "v0.6"}\n', 3663: '{"i": [["[\\"dense_layer\\", [108, 24], [64, 24]]", "cuda -keys=cuda,gpu -arch=sm_80 -max_num_threads=1024 -thread_warp_size=32", [-1, 16, 64, 49152, 2147483647, 1024, 8, 32], "", 0, []], [[], [["CHW", 2, "local"], ["SP", 2, 0, 2160, [1, 4, 1, 27], 1], ["SP", 2, 5, 1280, [2, 32, 1, 1], 1], ["SP", 2, 10, 192, [1, 24], 1], ["RE", 2, [0, 5, 1, 6, 2, 7, 10, 11, 3, 8, 12, 4, 9]], ["FSP", 3, 0, 1, 3], ["FSP", 3, 4, 2, 3], ["RE", 3, [0, 4, 1, 5, 2, 6, 3, 7]], ["CA", 2, 3, 5], ["CHR", 1, "shared", [2]], ["CA", 2, 3, 6], ["CHR", 0, "shared", [3]], ["CA", 1, 4, 6], ["FU", 5, [0, 1]], ["AN", 5, 0, 5], ["FU", 5, [1, 2]], ["AN", 5, 1, 4], ["FU", 5, [2, 3]], ["AN", 5, 2, 6], ["FU", 3, [0, 1]], ["SP", 3, 0, 24, [1], 1], ["AN", 3, 1, 2], ["FFSP", 3, 0, [2, 1], 1, 1], ["AN", 3, 1, 6], ["FU", 1, [0, 1]], ["SP", 1, 0, 240, [1], 1], ["AN", 1, 1, 2], ["FFSP", 1, 0, [2, 1], 1, 1], ["AN", 1, 1, 6], ["PR", 4, 0, "auto_unroll_max_step$2500"]]]], "r": [[0], 0, 0, 0], "v": "v0.6"}\n'}
def get_selected_msp_scheds():
	return {822:schedule_dense_822, 2434:schedule_dense_2434, 2968:schedule_dense_2968, 3216:schedule_dense_3216, 3529:schedule_dense_3529, 3663:schedule_dense_3663, }


